import os
import subprocess
import sys
import logging
import asyncio
import webbrowser # <-- New import for web Browse
from livekit.agents import function_tool # <-- Ensure this is imported

try:
    import pygetwindow as gw
except ImportError:
    gw = None

sys.stdout.reconfigure(encoding='utf-8') # type: ignore


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def focus_window(title_keyword: str) -> bool:
    if not gw:
        logger.warning("тЪа pygetwindow рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИред рд╡рд┐рдВрдбреЛ рдкрд░ рдлреЛрдХрд╕ рдХрд░рдиреЗ рдХреА рд╕реБрд╡рд┐рдзрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реЛрдЧреАред")
        return False

    await asyncio.sleep(1.5) # Give some time for the window to open
    title_keyword = title_keyword.lower().strip()

    for window in gw.getAllWindows():
        if title_keyword in window.title.lower():
            if window.isMinimized:
                window.restore()
            window.activate()
            logger.info(f"ЁЯкЯ рд╡рд┐рдВрдбреЛ рдлреЛрдХрд╕ рдореЗрдВ рдЖ рдЧрдИ: {window.title}")
            return True
    logger.warning("тЪа рдлреЛрдХрд╕ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╡рд┐рдВрдбреЛ рдирд╣реАрдВ рдорд┐рд▓реАред")
    return False

# Your existing 'open' (for specific apps), 'close', 'folder_file' functions would go here.
# I'm providing a placeholder if they were already there, otherwise, you'd add them.

# Placeholder for existing open, close, folder_file if they are in this file
@function_tool
async def open(app_name: str) -> str:
    """рдпрд╣ рдЯреВрд▓ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдЦреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реИред"""
    logger.info(f"рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдЦреЛрд▓рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░ рд░рд╣рд╛ рд╣реИ: {app_name}")
    try:
        if sys.platform.startswith('win'):
            subprocess.Popen(['start', app_name], shell=True)
        elif sys.platform.startswith('darwin'):
            subprocess.Popen(['open', '-a', app_name])
        else:
            subprocess.Popen([app_name])
        await focus_window(app_name) # Try to focus after opening
        return f"тЬЕ {app_name} рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдЦреЛрд▓рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд┐рдпрд╛ред"
    except FileNotFoundError:
        return f"тЭМ {app_name} рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдирд╣реАрдВ рдорд┐рд▓рд╛ред"
    except Exception as e:
        return f"тЭМ {app_name} рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдЦреЛрд▓рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {e}"

@function_tool
async def close(window_title_keyword: str) -> str:
    """рдпрд╣ рдЯреВрд▓ рдХрд┐рд╕реА рдЦреБрд▓реА рд╣реБрдИ рд╡рд┐рдВрдбреЛ рдХреЛ рдмрдВрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реИред"""
    logger.info(f"рд╡рд┐рдВрдбреЛ рдмрдВрдж рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░ рд░рд╣рд╛ рд╣реИ: {window_title_keyword}")
    if not gw:
        logger.warning("тЪа pygetwindow рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИред рд╡рд┐рдВрдбреЛ рдмрдВрдж рдХрд░рдиреЗ рдХреА рд╕реБрд╡рд┐рдзрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реЛрдЧреАред")
        return "рд╡рд┐рдВрдбреЛ рдмрдВрдж рдХрд░рдиреЗ рдХреА рд╕реБрд╡рд┐рдзрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред"

    try:
        windows = gw.getWindowsWithTitle(window_title_keyword)
        if windows:
            for window in windows:
                window.close()
            return f"тЬЕ '{window_title_keyword}' рд╡рд╛рд▓реА рд╡рд┐рдВрдбреЛ рдмрдВрдж рд╣реЛ рдЧрдИред"
        else:
            return f"тЭМ '{window_title_keyword}' рд╡рд╛рд▓реА рдХреЛрдИ рд╡рд┐рдВрдбреЛ рдирд╣реАрдВ рдорд┐рд▓реАред"
    except Exception as e:
        return f"тЭМ рд╡рд┐рдВрдбреЛ рдмрдВрдж рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {e}"

@function_tool
async def folder_file(path: str) -> str:
    """рдпрд╣ рдЯреВрд▓ рдПрдХ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдлрд╝реЛрд▓реНрдбрд░ рдпрд╛ рдлрд╝рд╛рдЗрд▓ рдПрдХреНрд╕рдкреНрд▓реЛрд░рд░ рдореЗрдВ рдЦреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реИред
    рдЙрджрд╛рд╣рд░рдг: 'folder_file("C:/Users/YourUser/Documents")'"""
    logger.info(f"рдлрд╝реЛрд▓реНрдбрд░/рдлрд╝рд╛рдЗрд▓ рдЦреЛрд▓рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░ рд░рд╣рд╛ рд╣реИ: {path}")
    try:
        if not os.path.exists(path):
            return f"тЭМ рдкрде рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИ: {path}"

        if sys.platform.startswith('win'):
            os.startfile(path)
        elif sys.platform.startswith('darwin'):
            subprocess.Popen(['open', path])
        else: # Linux
            subprocess.Popen(['xdg-open', path])
        
        # Try to focus, might need to adjust for generic folder windows
        await focus_window(os.path.basename(path) if os.path.isdir(path) else path)
        return f"тЬЕ {path} рдЦреЛрд▓рд╛ рдЧрдпрд╛ред"
    except Exception as e:
        return f"тЭМ рдлрд╝реЛрд▓реНрдбрд░/рдлрд╝рд╛рдЗрд▓ рдЦреЛрд▓рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {e}"

# --- NEW/UPDATED TOOL FOR APPLICATIONS AND WEBSITES ---
@function_tool
async def open_app_or_website(name: str) -> str:
    """
    рдпрд╣ рдЯреВрд▓ рдПрдХ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдЦреЛрд▓рддрд╛ рд╣реИ рдпрд╛ рдПрдХ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдиреЗрд╡рд┐рдЧреЗрдЯ рдХрд░рддрд╛ рд╣реИред
    рдЗрд╕рдХрд╛ рдЙрдкрдпреЛрдЧ рддрдм рдХрд░реЗрдВ рдЬрдм рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ 'YouTube', 'Google Chrome', 'Spotify' рдЬреИрд╕реЗ рдПрдкреНрд▓рд┐рдХреЗрд╢рди
    рдХреЛ 'рдЦреЛрд▓рдиреЗ', 'рд▓реЙрдиреНрдЪ рдХрд░рдиреЗ', 'рд╢реБрд░реВ рдХрд░рдиреЗ' рдХреЗ рд▓рд┐рдП рдХрд╣реЗ, рдпрд╛ 'facebook.com' рдЬреИрд╕реА рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд╣реЗред

    Args:
        name: рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдХрд╛ рдирд╛рдо (рдЬреИрд╕реЗ "Google Chrome", "Spotify")
              рдпрд╛ рдПрдХ рд╡реЗрдмрд╕рд╛рдЗрдЯ URL (рдЬреИрд╕реЗ "youtube.com", "google.com").
              YouTube рдХреЗ рд▓рд┐рдП, рдмрд╕ "youtube" рдпрд╛ "youtube.com" рдкрд╛рд╕ рдХрд░реЗрдВред
    """
    name_lower = name.lower().strip()
    logger.info(f"ЁЯМР рдПрдкреНрд▓рд┐рдХреЗрд╢рди/рд╡реЗрдмрд╕рд╛рдЗрдЯ рдЦреЛрд▓рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░ рд░рд╣рд╛ рд╣реИ: {name}")

    if "youtube" in name_lower: # Allow "youtube" or the full URL
        webbrowser.open("https://www.youtube.com/watch?v=6CYNFVBS2sw")
        await asyncio.sleep(2) # Give browser time to open
        await focus_window("youtube") # Try to focus the browser window
        return "тЬЕ YouTube рдЖрдкрдХреЗ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рдЦреБрд▓ рдЧрдпрд╛ рд╣реИред"
    elif "google.com" in name_lower or "google" == name_lower:
        webbrowser.open("http://www.google.com")
        await asyncio.sleep(2)
        await focus_window("google")
        return "тЬЕ Google рдЖрдкрдХреЗ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рдЦреБрд▓ рдЧрдпрд╛ рд╣реИред"
    elif "facebook.com" in name_lower or "facebook" == name_lower:
        webbrowser.open("http://www.facebook.com")
        await asyncio.sleep(2)
        await focus_window("facebook")
        return "тЬЕ Facebook рдЖрдкрдХреЗ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рдЦреБрд▓ рдЧрдпрд╛ рд╣реИред"
    elif "whatsapp web" in name_lower:
        webbrowser.open("http://web.whatsapp.com")
        await asyncio.sleep(2)
        await focus_window("whatsapp") # WhatsApp web usually has "WhatsApp" in title
        return "тЬЕ WhatsApp Web рдЖрдкрдХреЗ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рдЦреБрд▓ рдЧрдпрд╛ рд╣реИред"
    elif "chatgpt" in name_lower:
        webbrowser.open("http://chat.openai.com")
        await asyncio.sleep(2)
        await focus_window("chatgpt")
        return "тЬЕ ChatGPT рдЖрдкрдХреЗ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рдЦреБрд▓ рдЧрдпрд╛ рд╣реИред"
    elif "vscode" in name_lower or "visual studio code" in name_lower:
        app_commands = {
            'win32': ['code'], # Assumes 'code' is in PATH on Windows
            'darwin': ['open', '-a', 'Visual Studio Code'], # For macOS
            'linux': ['code'], # Assumes 'code' is in PATH on Linux
        }
        try:
            if sys.platform.startswith('win'):
                subprocess.Popen(app_commands['win32'], shell=True)
            elif sys.platform.startswith('darwin'):
                subprocess.Popen(app_commands['darwin'])
            elif sys.platform.startswith('linux'):
                subprocess.Popen(app_commands['linux'])
            await asyncio.sleep(3) # Give app time to launch
            await focus_window("visual studio code") # Try to focus VS Code window
            return "тЬЕ Visual Studio Code рдЦреЛрд▓рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред"
        except FileNotFoundError:
            return "тЭМ Visual Studio Code рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ рд╕реНрдерд╛рдкрд┐рдд рд╣реИ рдФрд░ рдЖрдкрдХреЗ рд╕рд┐рд╕реНрдЯрдо рдХреЗ PATH рдореЗрдВ рд╣реИред"
        except Exception as e:
            logger.error(f"тЭМ VS Code рдЦреЛрд▓рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}")
            return f"тЭМ VS Code рдЦреЛрд▓рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {e}"

    # Generic attempt to open other applications
    try:
        if sys.platform.startswith('win'):
            subprocess.Popen(['start', name], shell=True)
        elif sys.platform.startswith('darwin'):
            subprocess.Popen(['open', '-a', name])
        else: # Linux
            subprocess.Popen([name])
        await asyncio.sleep(2)
        await focus_window(name) # Try to focus the launched app
        return f"тЬЕ {name} рдЦреЛрд▓рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред"
    except FileNotFoundError:
        return f"тЭМ рдорд╛рдл рдХрд░рдирд╛, '{name}' рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдирд╣реАрдВ рдорд┐рд▓рд╛ред"
    except Exception as e:
        logger.error(f"тЭМ {name} рдЦреЛрд▓рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {e}")
        return f"тЭМ {name} рдЦреЛрд▓рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛ред: {e}"

# Add other window control functions here if you have them in this file
# e.g., minimize_window, maximize_window, etc.